## Project overview

See description of Assignment 10.



Compiler: g++ 13.2.0
source teachsetup

## Background

Lectures on MPI

## Description of files


- `gameoflife.cpp`: Main executable, computes a 2D gameoflife. It takes input (num_rows, num_cols, num_time_steps, fraction_alive_cells, OUTPUT).
- `fillcells_c2`, `outputcells_c2`, `updatecells_c2`: Catch2 executable files for testing the parallelization of the files: `updatecells.cpp`, `outputcells.cpp`, `fillcells.cpp`

- `teachsetup`: source file for the module. To run first.
- `Makefile`: Make file for gameoflife executable and to run the Catch2 test

- `fillcells.cpp`: Defines the functions initiate_cell that create a new 2d cell. It is also there that we specify the values of the global parameters: alive and dead.
- `fillcells_c2.cpp`: Catch2 test of `fillcells.cpp`
- `fillcell.h`: Header file for `fillcells.cpp`
- `outputcells.cpp`: Defines the functions output_cell that outputs the time step, the cells (alive = I, dead = - ) and the fraction of cells that are alive.
- `outputcells_c2.cpp`: Catch2 test of `outputcells.cpp`
- `outputcells.h`: Header file for `output_cell.cpp`.
- `updatecells.cpp`: Define the functions next_cell_state and update_cell. The next_cell_state updates each element of the cell (to alive or dead) for a time step. The function update_cell is a for loop that passes the next_cell_state function to every element of the cell that we want to evolve and return this new cell.
- `updatecells_c2.cpp`: Catch2 test of `updatecells.cpp`
- `updatecells.h`: Header file for `update_cell.cpp`.

- `gmon.out`: file created when running the ./gameoflife 100 100 100 (contains the profiling)
- `analysis1.txt`: gprof file for ./gameoflife 100 100 100 run BEFORE parallelization
- `analysis2.txt`: gprof file for ./gameoflife 100 100 100 run AFTER parallelization

- `original_output_(N).txt`, `test_ouput_(N).txt` (N = 1, 2, 3): Files for the make_integrated_test. `original_output_(N).txt` are the files that are the files that we compare to. We note that for N=3, we naturally have different printing order after parallelization.


 - `run_gameoflife.sh`: jobs script that run the parallelized ./gameoflife 1000 1000 1000 0.183 1 from 1 to 16 threads. 
- `runtimes.txt`: The run time of the jobs for 1 to 16 threads.
- `output_run_gameoflife.txt`: The outputs file of `run_gameoflife.sh`. 

- `Perron_Cedrick_HW10.zip`: zip file of the repository.


## Usage:
Contains in Usage.md


## Sources

Scinet cluster
