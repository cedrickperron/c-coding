# ReadMe for grav_waves

Author: Cedrick Perron
Email address: cedrick.perron@mail.utoronto.ca


## Project overview

For this assignment, you are to mimic one of the methods used by the Laser Interferometer Gravitational Wave Observatory (LIGO) for detecting gravitational waves (GWs) by analyzing signals from the detector, which led to the 2017 Nobel prize in physics for the detection of GWs.
We will use data generated by real numerical relativity simulations kindly made publicly available by the Center for Computational Relativity and Gravitation, see Campanelli, Lousto, Nakano, and Zlochower, Phys. Rev. D 79:084010 (2009).

An oversimplified representation of LIGOs "Matched Filtered Algorithm" goes as follows:

Consider a bank of predicted GW waveforms generated by numerical relativity simulations of binary black hole mergers. Each wave form is given as a complex-valued time series.
Collect a set of measured signals from the detector (also complex-valued time series).
Perform a power spectrum analysis, correlating the GWs signals with the signals in the simulated waveform bank. This correlation analysis is performed in the Fourier domain to make the results more robust, as the signals are usually embedded in noise.
Select candidate events with a high correlation coefficients with one of the predicted waveforms.

In this assignment, you will implement something similar. You only need to consider one predicted GW signal from simulations of the merger of two black holes in the netcdf file GWprediction.nc, and 32 detector signals in the netcdf files detection01.nc, ..., detection32.nc. This data can be found on the teach cluster in the directory /scinet/course/phy1610/gwdata.

The file structure is as follows. Each file contains a variable called f which stores the values of the wave signal at regularly spaced time points. The file also contains a variable with the actual times at which the samples were taken but this information is not really needed in this assignment. The wave signal is a set of double-precision complex numbers, so each point has a double-precision real and imaginary part. Because NetCDF does not have native complex number support, the f variable is a nt x 2 matrix, where the time dimension nt is stored in the file. This is in fact also how complex numbers are laid out in memory in C++, so it's in fact fairly easy to read in these files, e.g., like this:

#include <rarray>
#include <netcdf>
#include <complex>
using namespace netCDF;
...
 NcFile ncfile("detection01.nc", NcFile::read);
 rvector<std::complex<double>> frvector(ncfile.getDim("nt").getSize());
 ncfile.getVar("f").getVar(frvector.data());
...
You will have to compute the correlations of the power spectrum of the prediction with each mock detection. The power spectrum F of a signal f is related to the fourier transform of that signal: for each wave number k (in this case they are really frequency numbers), the power spectrum is the square norm of the fourier component with that wave number, i.e.,

𝐹𝑘=|𝑓̂𝑘|2=𝑓̂𝑘𝑓̂∗𝑘

Note that the power spectrum is real-valued.

The correlation of two power spectra F and G is given by

𝐶𝐹,𝐺=<𝐹,𝐺><𝐹,𝐹><𝐺,𝐺>‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾‾√


where <,> denotes an inner product, which here is simply:

<𝐴,𝐵>=∑𝑘=0𝑛−1𝐴𝑘𝐵𝑘


The algorithm that you have to implement is structured as follows:

Read the predicted GW signal from GWprediction.nc.
Read one of the GW signal from observations detection01.nc . . . detection32.nc.
Compute the FFT of the two complex quantities, using FFTW.
Compute the power spectrum of both signals.
Compute the correlation coefficient between the power spectra as defined above.
Store the correlation coefficient.
Repeat steps 2-to-6 for each of the signals in the observation set.
Finally, have the code determine the 5 most significant candidates (those with the 5 largest values of the correlation coefficient) from the observations set.




## Compiler and Libraries


Compiler: g++ 13.2.0


RARRAY
git clone https://github.com/dkirkby/rarray.git

HDF5
git clone https://github.com/HDFGroup/hdf5.git
cd hdf5
./configure --prefix=/path/to/installation/directory
make
make install

NetCDF
git clone https://github.com/Unidata/netcdf-c.git
cd netcdf-c
./configure --prefix=/path/to/installation/directory
make
make install


FFTW:

See directive in http://www.fftw.org/download.html



## Description of files


- `grav_waves_main`: Main executable, computes correlation functions of the predicted signal stored in the file `./data/GWprediction.nc` and the detection signals also stored in the `./data`
- `complex.h`: header file, define complex namespace
- `correl_fct_power_spectra.cpp`: compute the correlation function of two power spectras.
- `correl_fct_power_spectra.h`: header file for `correl_fct_power_spectra.cpp`
- `data` (dir): directory containing the signal data. There is the predicted signal stored in `GWprediction.nc` and the detection signals stored in `detection##.nc`
- `fft.cpp`: computes fourier transform of the signal stored as a f variable in the nc file (either forward [false] or backward [true]).
- `fft.h`: Header file for `fft.cpp`
- `power_spectrum.cpp`: computes the power spectrum of the fourier transform of the signal.
- `power_spectrum.h`: Header file for `power_spectrum.cpp`
- `open_ncfile.cpp`: opens the .nc file of the data directory and stores the signal into a rvector called f.
- `open_ncfile.h`: Header file for `open_ncfile.cpp`
- `Makefile`: Allows compiling with  `make` or clean with `make clean` and produces output files: `[name_file].o`, which are used to produced the executable file: `1dlaplacesolver`
- `grav_waves_main`: Executable file (see Usage)
- `[name_file]~`: Automatic copy of the file: [name_file].

## Usage:
Contains in Usage.md


## Sources

Scinet cluster
